// üìÅ src/multiCandleCache.js
const config = require('../config/config');
const logger = require('../logger');

const multiCandleCache = {}; // { symbol: { interval: [candles] } }

function initSymbol(symbol) {
  if (!multiCandleCache[symbol]) {
    multiCandleCache[symbol] = {
      '1m': [],
      '5m': [],
      '10m': []
    };
  }
}

function addCandle(symbol, interval, candle) {
  initSymbol(symbol);

  const cache = multiCandleCache[symbol][interval];
  if (!cache) return;

  cache.push(candle);

  if (cache.length > config.MAX_CACHE_LENGTH) {
    cache.shift();
  }

  logger.debug(`üì• [CACHE] –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–≤–µ—á–∞: ${symbol} ${interval} (–≤—Å–µ–≥–æ: ${cache.length})`);
}

function getCandles(symbol, interval) {
  const candles = multiCandleCache[symbol]?.[interval] || [];
  if (candles.length < 10) {
    logger.debug(`üïí [CACHE] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π: ${symbol} ${interval} ‚Äî ${candles.length}/10`);
  }
  return candles;
}

function clearCandles(symbol, interval) {
  if (multiCandleCache[symbol]) {
    multiCandleCache[symbol][interval] = [];
    logger.warn(`üßπ [CACHE] –û—á–∏—â–µ–Ω—ã —Å–≤–µ—á–∏ –¥–ª—è ${symbol} ${interval}`);
  }
}

function clearAll() {
  for (const symbol in multiCandleCache) {
    multiCandleCache[symbol]['1m'] = [];
    multiCandleCache[symbol]['5m'] = [];
    multiCandleCache[symbol]['10m'] = [];
  }
  logger.warn('[CACHE] –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–≤–µ—á–µ–π');
}

function getAllSymbols() {
  return Object.keys(multiCandleCache);
}

module.exports = {
  addCandle,
  getCandles,
  clearCandles,
  clearAll,
  getAllSymbols
};
